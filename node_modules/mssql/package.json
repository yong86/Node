{
  "author": {
    "name": "Patrik Simek",
    "url": "https://patriksimek.cz"
  },
  "name": "mssql",
  "description": "An easy-to-use MSSQL database connector for Node.js.",
  "keywords": [
    "database",
    "mssql",
    "sql",
    "msnodesql",
    "sqlserver",
    "tds",
    "node-tds",
    "tedious",
    "node-sqlserver",
    "sqlserver"
  ],
  "version": "0.5.3",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/patriksimek/node-mssql"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://opensource.org/licenses/mit-license.php"
    }
  ],
  "dependencies": {
    "tedious": ">=0.2.1",
    "generic-pool": ">=2.0.4"
  },
  "devDependencies": {
    "coffee-script": ">=1.7.1",
    "mocha": ">=1.12.0"
  },
  "engines": {
    "node": ">=0.6"
  },
  "scripts": {
    "test": "mocha",
    "prepublish": "coffee --compile --output ./lib ./src"
  },
  "readme": "# node-mssql [![Dependency Status](https://david-dm.org/patriksimek/node-mssql.png)](https://david-dm.org/patriksimek/node-mssql) [![NPM version](https://badge.fury.io/js/mssql.png)](http://badge.fury.io/js/mssql)\n\nAn easy-to-use MSSQL database connector for Node.js.\n\nThere are some TDS modules which offer functionality to communicate with MSSQL databases but none of them does offer enough comfort - implementation takes a lot of lines of code. So I decided to create this module, that make work as easy as it could without losing any important functionality. node-mssql uses other TDS modules as drivers and offer easy to use unified interface. It also add extra features and bug fixes.\n\nThere is also [co](https://github.com/visionmedia/co) warpper available - [co-mssql](https://github.com/patriksimek/co-mssql).\n\n**Extra features:**\n- Unified interface for multiple MSSQL modules\n- Connection pooling with Transactions and Prepared statements\n- Parametrized Stored Procedures in [node-tds](https://github.com/cretz/node-tds) and [Microsoft Driver for Node.js for SQL Server](https://github.com/WindowsAzure/node-sqlserver)\n- Serialization of Geography and Geometry CLR types\n- Injects original TDS modules with enhancements and bug fixes\n\nAt the moment it support three TDS modules:\n- [Tedious](https://github.com/pekim/tedious) by Mike D Pilsbury (pure javascript - windows/osx/linux)\n- [Microsoft Driver for Node.js for SQL Server](https://github.com/WindowsAzure/node-sqlserver) by Microsoft Corporation (native - windows only)\n- [node-tds](https://github.com/cretz/node-tds) by Chad Retz (pure javascript - windows/osx/linux)\n\n## What's new in 0.5.3 (stable, npm)\n\n- Support for [Prepared Statements](#prepared-statement)\n- Fixed order of output parameters\n- Minor fixes in node-tds driver\n\n## What's new in 0.5.1\n\n- Updated to new Tedious 0.2.2\n    - Added support for TDS 7.4\n    - Added request cancelation\n    - Added support for UDT, TVP, Time, Date, DateTime2 and DateTimeOffset data types\n    - Numeric, Decimal, SmallMoney and Money are now supported as input parameters\n    - Fixed compatibility with TDS 7.1 (SQL Server 2000)\n    - Minor fixes\n- You can now easily setup type's length/scale (`sql.VarChar(50)`)\n- Serialization of [Geography and Geometry](#geography) CLR types\n- Support for creating [Table-Value Parameters](#tvp) (`var tvp = new sql.Table()`)\n- Output parameters are now Input-Output and can handle initial value\n- Option to choose whether to pass/receive times in UTC or local time\n- Connecting to named instances simplified\n- Default SQL data type for JS String type is now NVarChar (was VarChar)\n\n## Installation\n\n    npm install mssql\n\n## Quick Example\n\n```javascript\nvar sql = require('mssql'); \n\nvar config = {\n    user: '...',\n    password: '...',\n    server: 'localhost', // You can use 'localhost\\\\instance' to connect to named instance\n    database: '...'\n}\n\nvar connection = new sql.Connection(config, function(err) {\n    // ... error checks\n    \n    // Query\n\t\n    var request = new sql.Request(connection); // or: var request = connection.request();\n    request.query('select 1 as number', function(err, recordset) {\n        // ... error checks\n        \n        console.dir(recordset);\n    });\n\t\n    // Stored Procedure\n\t\n    var request = new sql.Request(connection);\n    request.input('input_parameter', sql.Int, 10);\n    request.output('output_parameter', sql.VarChar(50));\n    request.execute('procedure_name', function(err, recordsets, returnValue) {\n        // ... error checks\n        \n        console.dir(recordsets);\n    });\n\t\n});\n```\n\n## Quick Example with one global connection\n\n```javascript\nvar sql = require('mssql'); \n\nvar config = {\n    user: '...',\n    password: '...',\n    server: 'localhost', // You can use 'localhost\\\\instance' to connect to named instance\n    database: '...'\n}\n\nsql.connect(config, function(err) {\n    // ... error checks\n\t\n    // Query\n\t\n    var request = new sql.Request();\n    request.query('select 1 as number', function(err, recordset) {\n        // ... error checks\n\n        console.dir(recordset);\n    });\n\t\n    // Stored Procedure\n\t\n    var request = new sql.Request();\n    request.input('input_parameter', sql.Int, value);\n    request.output('output_parameter', sql.VarChar(50));\n    request.execute('procedure_name', function(err, recordsets, returnValue) {\n        // ... error checks\n\n        console.dir(recordsets);\n    });\n\t\n});\n```\n\n## Documentation\n\n### Configuration\n\n* [Basic](#cfg-basic)\n* [Tedious](#cfg-tedious)\n* [Microsoft Driver for Node.js for SQL Server](#cfg-msnodesql)\n* [node-tds](#cfg-node-tds)\n\n### Connections\n\n* [Connection](#connection)\n* [connect](#connect)\n* [close](#close)\n\n### Requests\n\n* [Request](#request)\n* [execute](#execute)\n* [input](#input)\n* [output](#output)\n* [query](#query)\n* [cancel](#cancel)\n\n### Transactions\n\n* [Transaction](#transaction)\n* [begin](#begin)\n* [commit](#commit)\n* [rollback](#rollback)\n\n### Prepared Statements\n\n* [PreparedStatement](#prepared-statement)\n* [input](#prepared-statement-input)\n* [output](#prepared-statement-output)\n* [prepare](#prepare)\n* [execute](#prepared-statement-execute)\n* [unprepare](#unprepare)\n\n### Other\n\n* [Geography and Geometry](#geography)\n* [Table-Valued Parameter](#tvp)\n* [Errors](#errors)\n* [Metadata](#meta)\n* [Data Types](#data-types)\n* [Verbose Mode](#verbose)\n* [Known issues](#issues)\n\n## Configuration\n\n```javascript\nvar config = {\n    user: '...',\n    password: '...',\n    server: 'localhost',\n    database: '...',\n    pool: {\n        max: 10,\n        min: 0,\n        idleTimeoutMillis: 30000\n    }\n}\n```\n\n<a name=\"cfg-basic\" />\n### Basic configuration is same for all drivers.\n\n- **driver** - Driver to use (default: `tedious`). Possible values: `tedious`, `msnodesql` or `tds`.\n- **user** - User name to use for authentication.\n- **password** - Password to use for authentication.\n- **server** - Server to connect to. You can use 'localhost\\\\instance' to connect to named instance.\n- **port** - Port to connect to (default: `1433`). Don't set when connecting to named instance.\n- **database** - Database to connect to (default: dependent on server configuration).\n- **timeout** - Connection timeout in ms (default: `15000`).\n- **pool.max** - The maximum number of connections there can be in the pool (default: `10`).\n- **pool.min** - The minimun of connections there can be in the pool (default: `0`).\n- **pool.idleTimeoutMillis** - The Number of milliseconds before closing an unused connection (default: `30000`).\n\n<a name=\"cfg-tedious\" />\n### Tedious\n\n- **options.instanceName** - The instance name to connect to. The SQL Server Browser service must be running on the database server, and UDP port 1444 on the database server must be reachable.\n- **options.useUTC** - A boolean determining whether or not use UTC time for values without time zone offset (default: `true`).\n- **options.encrypt** - A boolean determining whether or not the connection will be encrypted (default: `false`) Encryption support is experimental.\n- **options.tdsVersion** - The version of TDS to use (default: `7_4`, available: `7_2`, `7_3_A`, `7_3_B`, `7_4`).\n\nMore information about Tedious specific options: http://pekim.github.io/tedious/api-connection.html\n\n<a name=\"cfg-msnodesql\" />\n### Microsoft Driver for Node.js for SQL Server\n\nThis driver is not part of the default package and must be installed separately by `npm install msnodesql`. If you are looking for compiled binaries, see [node-sqlserver-binary](https://github.com/jorgeazevedo/node-sqlserver-binary).\n\n- **options.instanceName** - The instance name to connect to. The SQL Server Browser service must be running on the database server, and UDP port 1444 on the database server must be reachable.\n- **connectionString** - Connection string (default: see below).\n- **options.trustedConnection** - Use Windows Authentication (default: `false`).\n- **options.useUTC** - A boolean determining whether or not use UTC time for values without time zone offset (default: `true`).\n\nDefault connection string when connecting to port:\n```\nDriver={SQL Server Native Client 11.0};Server={#{server},#{port}};Database={#{database}};Uid={#{user}};Pwd={#{password}};Trusted_Connection={#{trusted}};\n```\n\nDefault connection string when connecting to named instance:\n```\nDriver={SQL Server Native Client 11.0};Server={#{server}\\\\#{instance}};Database={#{database}};Uid={#{user}};Pwd={#{password}};Trusted_Connection={#{trusted}};\n```\n\n<a name=\"cfg-node-tds\" />\n### node-tds\n\nThis driver is not part of the default package and must be installed separately by `npm install tds`.\n\n_This module update node-tds driver with extra features and bug fixes by overriding some of its internal functions. If you want to disable this, require module with `var sql = require('mssql/nofix')`._\n\n<a name=\"connection\" />\n## Connections\n\n```javascript\nvar connection = new sql.Connection({ /* config */ });\n```\n\n### Events\n\n- **connect** - Dispatched after connection has established.\n- **close** - Dispatched after connection has closed a pool (by calling `close`).\n\n---------------------------------------\n\n<a name=\"connect\" />\n### connect([callback])\n\nCreate connection to the server.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after connection has established, or an error has occurred. Optional.\n\n__Example__\n\n```javascript\nvar connection = new sql.Connection({\n    user: '...',\n    password: '...',\n    server: 'localhost',\n    database: '...'\n});\n\nconnection.connect(function(err) {\n    // ...\n});\n```\n\n---------------------------------------\n\n<a name=\"close\" />\n### close()\n\nClose connection to the server.\n\n__Example__\n\n```javascript\nconnection.close();\n```\n\n<a name=\"request\" />\n## Requests\n\n```javascript\nvar request = new sql.Request(/* [connection] */);\n```\n\nIf you ommit connection argument, global connection is used instead.\n\n### Events\n\n- **recordset(recordset)** - Dispatched when new recordset is parsed (and all its rows).\n- **row(row)** - Dispatched when new row is parsed.\n- **done(err, recordsets)** - Dispatched when request is complete.\n\n---------------------------------------\n\n<a name=\"execute\" />\n### execute(procedure, [callback])\n\nCall a stored procedure.\n\n__Arguments__\n\n- **procedure** - Name of the stored procedure to be executed.\n- **callback(err, recordsets, returnValue)** - A callback which is called after execution has completed, or an error has occurred. `returnValue` is also accessible as property of recordsets.\n\n__Example__\n\n```javascript\nvar request = new sql.Request();\nrequest.input('input_parameter', sql.Int, value);\nrequest.output('output_parameter', sql.Int);\nrequest.execute('procedure_name', function(err, recordsets, returnValue) {\n    // ... error checks\n    \n    console.log(recordsets.length); // count of recordsets returned by the procedure\n    console.log(recordsets[0].length); // count of rows contained in first recordset\n    console.log(returnValue); // procedure return value\n    console.log(recordsets.returnValue); // same as previous line\n\t\n    console.log(request.parameters.output_parameter.value); // output value\n\t\n    // ...\n});\n```\n\n---------------------------------------\n\n<a name=\"input\" />\n### input(name, [type], value)\n\nAdd an input parameter to the request.\n\n__Arguments__\n\n- **name** - Name of the input parameter without @ char.\n- **type** - SQL data type of input parameter. If you omit type, module automaticaly decide which SQL data type should be used based on JS data type.\n- **value** - Input parameter value. `undefined` ans `NaN` values are automatically converted to `null` values.\n\n__Example__\n\n```javascript\nrequest.input('input_parameter', value);\nrequest.input('input_parameter', sql.Int, value);\n```\n\n__JS Data Type To SQL Data Type Map__\n\n- `String` -> `sql.NVarChar`\n- `Number` -> `sql.Int`\n- `Boolean` -> `sql.Bit`\n- `Date` -> `sql.DateTime`\n- `Buffer` -> `sql.VarBinary`\n- `sql.Table` -> `sql.TVP`\n\nDefault data type for unknown object is `sql.NVarChar`.\n\nYou can define you own type map.\n\n```javascript\nsql.map.register(MyClass, sql.Text);\n```\n\nYou can also overwrite default type map.\n\n```javascript\nsql.map.register(Number, sql.BigInt);\n```\n\n---------------------------------------\n\n<a name=\"output\" />\n### output(name, type, [value])\n\nAdd an output parameter to the request.\n\n__Arguments__\n\n- **name** - Name of the output parameter without @ char.\n- **type** - SQL data type of output parameter.\n- **value** - Output parameter value initial value. `undefined` and `NaN` values are automatically converted to `null` values. Optional.\n\n__Example__\n\n```javascript\nrequest.output('output_parameter', sql.Int);\nrequest.output('output_parameter', sql.VarChar(50), 'abc');\n```\n\n---------------------------------------\n\n<a name=\"query\" />\n### query(command, [callback])\n\nExecute the SQL command.\n\n__Arguments__\n\n- **command** - T-SQL command to be executed.\n- **callback(err, recordset)** - A callback which is called after execution has completed, or an error has occurred.\n\n__Example__\n\n```javascript\nvar request = new sql.Request();\nrequest.query('select 1 as number', function(err, recordset) {\n    // ... error checks\n    \n    console.log(recordset[0].number); // return 1\n\t\n    // ...\n});\n```\n\nYou can enable multiple recordsets in querries by `request.multiple = true` command.\n\n```javascript\nvar request = new sql.Request();\nrequest.multiple = true;\n\nrequest.query('select 1 as number; select 2 as number', function(err, recordsets) {\n    // ... error checks\n    \n    console.log(recordsets[0][0].number); // return 1\n    console.log(recordsets[1][0].number); // return 2\n});\n```\n\n---------------------------------------\n\n<a name=\"cancel\" />\n### cancel()\n\nCancel currently executing request. Return `true` if cancelation packet was send successfully. Not available in `msnodesql` and `tds` drivers.\n\n__Example__\n\n```javascript\nvar request = new sql.Request();\nrequest.query('waitfor delay \\'00:00:05\\'; select 1 as number', function(err, recordset) {\n    console.log(err instanceof sql.RequestError);  // true\n    console.log(err.message);                      // Canceled.\n    console.log(err.code);                         // ECANCEL\n\t\n    // ...\n});\n\nrequest.cancel();\n```\n\n<a name=\"transaction\" />\n## Transactions\n\n**Important:** always use `Transaction` class to create transactions - it ensures that all your requests are executed on one connection. Once you call `begin`, a single connection is aquired from the connection pool and all subsequent requests (initialized with the `Transaction` object) are executed exclusively on this connection. Transaction also contains queue to make sure your requests are executed in series. After you call `commit` or `rollback`, connection is then released back to the connection pool.\n\n```javascript\nvar transaction = new sql.Transaction(/* [connection] */);\n```\n\nIf you ommit connection argument, global connection is used instead.\n\n__Example__\n\n```javascript\nvar transaction = new sql.Transaction(/* [connection] */);\ntransaction.begin(function(err) {\n    // ... error checks\n\n    var request = new sql.Request(transaction);\n    request.query('insert into mytable (mycolumn) values (12345)', function(err, recordset) {\n        // ... error checks\n\n        transaction.commit(function(err, recordset) {\n            // ... error checks\n            \n            console.log(\"Transaction commited.\");\n        });\n    });\n});\n```\n\nTransaction can also be created by `var transaction = connection.transaction();`. Requests can also be created by `var request = transaction.request();`.\n\n### Events\n\n- **begin** - Dispatched when transaction begin.\n- **commit** - Dispatched on successful commit.\n- **rollback** - Dispatched on successful rollback.\n\n---------------------------------------\n\n<a name=\"begin\" />\n### begin([isolationLevel], [callback])\n\nBegin a transaction.\n\n__Arguments__\n\n- **isolationLevel** - Controls the locking and row versioning behavior of TSQL statements issued by a connection. Optional. `READ_COMMITTED` by default. For possible values see `sql.ISOLATION_LEVEL`.\n- **callback(err)** - A callback which is called after transaction has began, or an error has occurred. Optional.\n\n__Example__\n\n```javascript\nvar transaction = new sql.Transaction();\ntransaction.begin(function(err) {\n    // ... error checks\n});\n```\n\n---------------------------------------\n\n<a name=\"commit\" />\n### commit([callback])\n\nCommit a transaction.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after transaction has commited, or an error has occurred. Optional.\n\n__Example__\n\n```javascript\nvar transaction = new sql.Transaction();\ntransaction.begin(function(err) {\n    // ... error checks\n    \n    transaction.commit(function(err) {\n        // ... error checks\n    })\n});\n```\n\n---------------------------------------\n\n<a name=\"rollback\" />\n### rollback([callback])\n\nRollback a transaction.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after transaction has rolled back, or an error has occurred. Optional.\n\n__Example__\n\n```javascript\nvar transaction = new sql.Transaction();\ntransaction.begin(function(err) {\n    // ... error checks\n    \n    transaction.rollback(function(err) {\n        // ... error checks\n    })\n});\n```\n\n<a name=\"prepared-statement\" />\n## PreparedStatement\n\n**Important:** always use `PreparedStatement` class to create prepared statements - it ensures that all your executions of prepared statement are executed on one connection. Once you call `prepare`, a single connection is aquired from the connection pool and all subsequent executions are executed exclusively on this connection. Prepared Statement also contains queue to make sure your executions are executed in series. After you call `unprepare`, connection is then released back to the connection pool.\n\n```javascript\nvar ps = new sql.PreparedStatement(/* [connection] */);\n```\n\nIf you ommit connection argument, global connection is used instead.\n\n__Example__\n\n```javascript\nvar ps = new sql.PreparedStatement(/* [connection] */);\nps.input('param', sql.Int);\nps.prepare('select @param as value', function(err, recordsets) {\n    // ... error checks\n\n    ps.execute({param: 12345}, function(err, recordset) {\n        // ... error checks\n\n        ps.unprepare(function(err) {\n            // ... error checks\n            \n        });\n    });\n});\n```\n\n**IMPORTANT**: Rememeber that each prepared statement means one reserved connection from the pool. Don't forget to unprepare a prepared statement!\n\n**TIP**: You can also create prepared statements in transactions (`new sql.PreparedStatement(transaction)`), but keep in mind you can't execute other requests in the transaction until you call `unprepare`.\n\n---------------------------------------\n\n<a name=\"prepared-statement-input\" />\n### input(name, type)\n\nAdd an input parameter to the prepared statement.\n\n__Arguments__\n\n- **name** - Name of the input parameter without @ char.\n- **type** - SQL data type of input parameter.\n\n__Example__\n\n```javascript\nps.input('input_parameter', sql.Int);\nps.input('input_parameter', sql.VarChar(50));\n```\n\n---------------------------------------\n\n<a name=\"prepared-statement-output\" />\n### output(name, type)\n\nAdd an output parameter to the prepared statement.\n\n__Arguments__\n\n- **name** - Name of the output parameter without @ char.\n- **type** - SQL data type of output parameter.\n\n__Example__\n\n```javascript\nps.output('output_parameter', sql.Int);\nps.output('output_parameter', sql.VarChar(50));\n```\n\n---------------------------------------\n\n<a name=\"prepare\" />\n### prepare(statement, [callback])\n\nPrepare a statement.\n\n__Arguments__\n\n- **statement** - T-SQL statement to prepare.\n- **callback(err)** - A callback which is called after preparation has completed, or an error has occurred. Optional.\n\n__Example__\n\n```javascript\nvar ps = new sql.PreparedStatement();\nps.prepare('select @param as value', function(err) {\n    // ... error checks\n});\n```\n\n---------------------------------------\n\n<a name=\"prepared-statement-execute\" />\n### execute(values, [callback])\n\nExecute a prepared statement.\n\n__Arguments__\n\n- **values** - An object whose names correspond to the names of parameters that were added to the prepared statement before it was prepared.\n- **callback(err)** - A callback which is called after execution has completed, or an error has occurred. Optional.\n\n__Example__\n\n```javascript\nvar ps = new sql.PreparedStatement();\nps.input('param', sql.Int);\nps.prepare('select @param as value', function(err) {\n    // ... error checks\n    \n    ps.execute({param: 12345}, function(err, recordset) {\n        // ... error checks\n        \n        console.log(recordset[0].value); // return 12345\n    })\n});\n```\n\nYou can enable multiple recordsets by `ps.multiple = true` command.\n\nvar ps = new sql.PreparedStatement();\nps.input('param', sql.Int);\nps.prepare('select @param as value', function(err) {\n    // ... error checks\n    \n    ps.execute({param: 12345}, function(err, recordsets) {\n        // ... error checks\n        \n        console.log(recordsets[0][0].value); // return 12345\n    })\n});\n\n---------------------------------------\n\n<a name=\"unprepare\" />\n### unprepare([callback])\n\nUnprepare a prepared statement.\n\n__Arguments__\n\n- **callback(err)** - A callback which is called after unpreparation has completed, or an error has occurred. Optional.\n\n__Example__\n\n```javascript\nvar ps = new sql.PreparedStatement();\nps.input('param', sql.Int);\nps.prepare('select @param as value', function(err, recordsets) {\n    // ... error checks\n\n    ps.unprepare(function(err) {\n        // ... error checks\n        \n    });\n});\n```\n\n<a name=\"geography\" />\n## Geography and Geometry\n\nnode-mssql has built-in serializer for Geography and Geometry CLR data types.\n\n```sql\nselect geography::STGeomFromText('LINESTRING(-122.360 47.656, -122.343 47.656 )', 4326)\nselect geometry::STGeomFromText('LINESTRING (100 100 10.3 12, 20 180, 180 180)', 0)\n```\n\nResults in:\n\n```javascript\n{ srid: 4326,\n  version: 1,\n  points: [ { x: 47.656, y: -122.36 }, { x: 47.656, y: -122.343 } ],\n  figures: [ { attribute: 1, pointOffset: 0 } ],\n  shapes: [ { parentOffset: -1, figureOffset: 0, type: 2 } ],\n  segments: [] }\n  \n{ srid: 0,\n  version: 1,\n  points: \n   [ { x: 100, y: 100, z: 10.3, m: 12 },\n     { x: 20, y: 180, z: NaN, m: NaN },\n     { x: 180, y: 180, z: NaN, m: NaN } ],\n  figures: [ { attribute: 1, pointOffset: 0 } ],\n  shapes: [ { parentOffset: -1, figureOffset: 0, type: 2 } ],\n  segments: [] }\n```\n\n<a name=\"tvp\" />\n## Table-Valued Parameter (TVP)\n\nSupported on SQL Server 2008 and later. Not supported by optional drivers `msnodesql` and `tds`. You can pass a data table as a parameter to stored procedure. First, we have to create custom type in our database.\n\n```sql\nCREATE TYPE TestType AS TABLE ( a VARCHAR(50), b INT );\n```\n\nNext we will need a stored procedure.\n\n```sql\nCREATE PROCEDURE MyCustomStoredProcedure (@tvp TestType readonly) AS SELECT * FROM @tvp\n```\n\nNow let's go back to our Node.js app.\n\n```javascript\nvar tvp = new sql.Table()\n\n// Columns must correspond with type we have created in database.\ntvp.columns.add('a', sql.VarChar(50));\ntvp.columns.add('b', sql.Int);\n\n// Add rows\ntvp.rows.add('hello tvp', 777); // Values are in same order as columns.\n```\n\nYou can send table as a parameter to stored procedure.\n\n```javascript\nvar request = new sql.Request();\nrequest.input('tvp', tvp);\nrequest.execute('MyCustomStoredProcedure', function(err, recordsets, returnValue) {\n    // ... error checks\n    \n    console.dir(recordsets[0][0]); // {a: 'hello tvp', b: 777}\n});\n```\n\n**TIP**: You can also create Table variable from any recordset with `recordset.toTable()`.\n\n<a name=\"errors\" />\n## Errors\n\nThere are three type of errors you can handle:\n\n- **ConnectionError** - Errors related to connections and connection pool.\n- **TransactionError** - Errors related to creating, commiting and rolling back transactions.\n- **RequestError** - Errors related to queries and stored procedures execution.\n- **PreparedStatementError** - Errors related to prepared statements.\n\nThose errors are initialized in node-mssql module and it's original stack can be cropped. You can always access original error with `err.originalError`.\n\n<a name=\"meta\" />\n## Metadata\n\nRecordset metadata are accessible trough `recordset.columns` property.\n\n```javascript\nvar request = new sql.Request();\nrequest.query('select 1 as first, \\'asdf\\' as second', function(err, recordset) {\n    console.dir(recordset.columns);\n\t\n    console.log(recordset.columns.first.type === sql.Int); // true\n    console.log(recordset.columns.second.type === sql.VarChar); // true\n});\n```\n\nColumns structure for example above:\n\n```javascript\n{ first: { name: 'first', length: 10, type: [sql.Int] },\n  second: { name: 'second', length: 4, type: [sql.VarChar] } }\n```\n\n<a name=\"data-types\" />\n## Data Types\n\nYou can define data types with length/precision/scale:\n\n```javascript\nrequest.input(\"name\", sql.VarChar, \"abc\");               // varchar(3)\nrequest.input(\"name\", sql.VarChar(50), \"abc\");           // varchar(50)\nrequest.input(\"name\", sql.VarChar(sql.MAX), \"abc\");      // varchar(MAX)\nrequest.output(\"name\", sql.VarChar);                     // varchar(8000)\nrequest.output(\"name\", sql.VarChar, \"abc\");              // varchar(3)\n\nrequest.input(\"name\", sql.Decimal, 155.33);              // decimal(18, 0)\nrequest.input(\"name\", sql.Decimal(10), 155.33);          // decimal(10, 0)\nrequest.input(\"name\", sql.Decimal(10, 2), 155.33);       // decimal(10, 2)\n\nrequest.input(\"name\", sql.DateTime2, new Date());        // datetime2(7)\nrequest.input(\"name\", sql.DateTime2(5), new Date());     // datetime2(5)\n```\n\nList of supported data types:\n\n```\nsql.Bit\nsql.BigInt\nsql.Decimal ([precision], [scale])\nsql.Float\nsql.Int\nsql.Money\nsql.Numeric ([precision], [scale])\nsql.SmallInt\nsql.SmallMoney\nsql.Real\nsql.TinyInt\n\nsql.Char ([length])\nsql.NChar ([length])\nsql.Text\nsql.NText\nsql.VarChar ([length])\nsql.NVarChar ([length])\nsql.Xml\n\nsql.Time ([scale])\nsql.Date\nsql.DateTime\nsql.DateTime2 ([scale])\nsql.DateTimeOffset ([scale])\nsql.SmallDateTime\n\nsql.UniqueIdentifier\n\nsql.Binary\nsql.VarBinary ([length])\nsql.Image\n\nsql.UDT\nsql.Geography\nsql.Geometry\n```\n\nTo setup MAX length for `VarChar`, `NVarChar` and `VarBinary` use `sql.MAX` length.\n\n<a name=\"verbose\" />\n## Verbose Mode\n\nYou can enable verbose mode by `request.verbose = true` command.\n\n```javascript\nvar request = new sql.Request();\nrequest.verbose = true;\nrequest.input('username', 'patriksimek');\nrequest.input('password', 'dontuseplaintextpassword');\nrequest.input('attempts', 2);\nrequest.execute('my_stored_procedure');\n```\n\nOutput for example above could look similar to this.\n\n```\n---------- sql execute --------\n     proc: my_stored_procedure\n    input: @username, varchar, patriksimek\n    input: @password, varchar, dontuseplaintextpassword\n    input: @attempts, bigint, 2\n---------- response -----------\n{ id: 1,\n  username: 'patriksimek',\n  password: 'dontuseplaintextpassword',\n  email: null,\n  language: 'en',\n  attempts: 2 }\n---------- --------------------\n   return: 0\n duration: 5ms\n---------- completed ----------\n```\n\n<a name=\"issues\" />\n## Known issues\n\n### msnodesql\n\n- msnodesql 0.2.1 contains bug in DateTimeOffset ([reported](https://github.com/WindowsAzure/node-sqlserver/issues/160))\n\n### node-tds\n\n- If you're facing problems with date, try changing your tsql language `set language 'English';`.\n- node-tds 0.1.0 doesn't support connecting to named instances.\n- node-tds 0.1.0 contains bug and return same value for columns with same name.\n- node-tds 0.1.0 doesn't support codepage of input parameters.\n- node-tds 0.1.0 contains bug in selects that doesn't return any values *(select @param = 'value')*.\n- node-tds 0.1.0 doesn't support Binary, VarBinary and Image as parameters.\n- node-tds 0.1.0 always return date/time values in local time.\n\n<a name=\"license\" />\n## License\n\nCopyright (c) 2013-2014 Patrik Simek\n\nThe MIT License\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/patriksimek/node-mssql/issues"
  },
  "homepage": "https://github.com/patriksimek/node-mssql",
  "_id": "mssql@0.5.3",
  "_shasum": "470fc7e05ecf03824de804022128cb0743f87d5d",
  "_from": "mssql@>=0.5.3",
  "_resolved": "https://registry.npmjs.org/mssql/-/mssql-0.5.3.tgz"
}
